name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - shiva_branch

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:5.7
        env:
          MYSQL_ROOT_PASSWORD: password
          MYSQL_DATABASE: my_test_database
          MYSQL_USER: flask_user
          MYSQL_PASSWORD: user123
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.x'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run tests with coverage
      run: |
        pytest --cov-report=xml --cov=.

    - name: Upload coverage report
      uses: codecov/codecov-action@v2
      with:
        token: ${{ secrets.CODECOV_TOKEN }}

  build-and-push:
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/shiva_branch'

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v1

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Build and push Docker image
      env:
        DATE: ${{ github.event.head_commit.timestamp }}
        VERSION: ${{ github.run_number }}
        BRANCH: ${{ github.ref_slug }}
      run: |
        docker buildx build --platform linux/amd64,linux/arm64 -t shivaprasad/my_flask_app:${BRANCH}-${DATE}-${VERSION} --push .
        if [ ${{ github.event_name }} == 'push' ]; then
          docker tag shivaprasad/my_flask_app:${BRANCH}-${DATE}-${VERSION} shivaprasad/my_flask_app:${BRANCH}-latest
          docker push shivaprasad/my_flask_app:${BRANCH}-latest
        fi
      env:
        DOCKER_CLI_EXPERIMENTAL: enabled
        DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
        DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
